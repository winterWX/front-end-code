/**
 * @returns 
 * 
 *   闭包： 有权访问另一个函数内部变量的函数，就是闭包。
 *   闭包的特点就是：
 *        1. 函数嵌套函数。
 *        2. 内部嵌套函数引用外部变量。
 *        3. 局部变量的状态得到了保存，不会污染全局。
 *   闭包产生的目的： 实际由于局部变量无法共享和长久保存状态， 
 *                   而全局变量可能造成变量污染。为了让函数内部的局部变量的状态得到保存，就产生了闭包。        
 */

/**
 * 案列一
 * 分析：虽然写法满足闭包的特点，但是没有形成一个闭包
 *       因为每一调用的时候局部变量a得到了更新，根据浏览器的调用机制
 *       函数调用完就会被销毁。等到二次调用的时候就会又被重新创建。
*/
function fo(){
  var a = 10;
  return function bar(){
    a++
    console.log(a)
  }
}
fo()()
fo()()

// 案例二
/**
 * 
 * @returns 
 *   分析：由于函数被赋值给了一个全局变量,全局变量一直引用着这个函数，所以调用完了函数不会被销毁，
 *         函数内部的局部变量的状态也被保存了下来。第二次调用时就是会在之前的状态值的基础上调用。
*/

function fo(){
  var a = 10;
  return function bar(){
    a++
    console.log(a)
  }
}
var f = fo()
console.log('ff=====',f);
f()
f()


// 案例三
/**
 * 
 * @returns 
 *  分析：  ？？？？
 */

function bar(){
  var a = 100;
  return function(){
     a++;
     console.log(a);
  }
}
var x = bar();
x();
x();

var y = bar();
y();
y();


