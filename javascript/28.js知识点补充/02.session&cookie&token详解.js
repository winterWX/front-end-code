/**
 *  cookies:
 *    1.cookie是浏览器实现的一种数据的存储功能。
 *    1.cookies是由服务器生成的，浏览器第一次访问服务器，服务器就会生成cookie数据。
 *      发给浏览器，浏览器就会以key和value的形式进行缓存，再发送请求时，会将浏览器保存的数据再次发送到服务器。
 *    2.用来存储一些用户信息和协议凭证。
 *    3.存在安全隐患，信息可能会被窃取。
 *    4.有大小的限制,单个cookie不能超过4k，浏览器限制站点最多可以保存20个cookie
*/


/**
  *  session 和 token
  *  出现的前提都是：为了解决用户请求登录时辨别用户唯一身份的标识。
  * 
  *  session : 用户请求服务器时,服务器会生成一个唯一的会话，
  *            里面包含这用户的个人信息，返给浏览器，浏览器进行缓存，下次再进行请求时将缓存的信息发给服务器，
  *            服务器进行辨识用户身份，但是随着用户的增多，服务器要保存很多的用户信息，就会给服务器造成压力，也不
  *            易于扩展。
  * 
  *  token: 用户请求服务器时,服务器会发一个token给用户，
  *            里面包含这用户的个人信息和经过算法处理的签名，返给浏览器，浏览器进行缓存，
  *            下次再进行请求时在请求头处配置token就可以。服务器没有保存token，只是拿到token后
  *            会解析token，进行认证。但是保存敏感信息存在风险，然后服务器就会只生成token，然后验证token就可以了。
  * 
  *  token具有以下的特点：{
  *      1.无状态(不用用户每次请求都发验证信息)，可扩展(服务器不需要存储)
  *      2.支持移动过设备
  *      3.跨程序调用(跨域)
  *      4.安全(有时效)
  *  }
  *
*/


// HTTP响应中就使用多个Set-Cookie进行表示
// cookie有2种存储方式，一种是会话性，一种是持久性。

// 会话性：如果cookie为会话性，那么cookie仅会保存在客户端的内存中，当我们关闭客服端时cookie也就失效了
// 持久性：如果cookie为持久性，那么cookie会保存在用户的硬盘中，直至生存期结束或者用户主动将其销毁。


// 重要知识
# https://blog.csdn.net/xubenxismile/article/details/92838749?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165491863216781683914063%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165491863216781683914063&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-92838749-null-null.142^v13^control,157^v14^new_3&utm_term=token&spm=1018.2226.3001.4187