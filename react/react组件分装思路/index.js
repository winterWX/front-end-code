- 组件封装意图
    - 分装组件的原则是
        - 单一职责
        - 复用性高 
        - 可扩展 
        - 低耦合 
        - 便于维护
    -  1. 通用容器组件
        - 如果组件渲染结构清晰的，只需传入依赖的状态使其正常展示
        - 如果组件的形式和内容需要依赖外部的传入，则都采用组合的形式传入
    -  2. 单一类组件
        - 例如处理获取到的用户信息
        - 头像上传
    -  3. 结构化组件拆分封装
        - 根据页面结构 进行拆分 header footer manun 分子
        - 分子拆分成原子组件 如 ui input select 等
    -  4. 状态管理型的组件
        - Props Drilling：通过组件树从上到下传递props。
        - Context API：适用于跨多层的全局状态管理。
        - 状态提升：将共享状态提升到最近的共同父组件中，并通过props传递。
        - Hooks：如useState和useContext等，可以帮助管理组件内部状态和跨组件状
    -  5. 组合与复用
        - 将封装后的分子组件可以进行组合
    -  6. 逻辑复用组件 可以借助 高阶组件和Render Props进行逻辑复用
    -  7. 集成三方库组件的分装
    -  8. 功能性组件的封装 如 并发封装 防抖 节流
    -  实施考虑
        -  封装后的组件的适用范围 本项目 还是跨项目
        -  对封装好的组件进行单元测试 确保逻辑的正常
        -  对封装的组件进行性能优化
        -  进行redman记录