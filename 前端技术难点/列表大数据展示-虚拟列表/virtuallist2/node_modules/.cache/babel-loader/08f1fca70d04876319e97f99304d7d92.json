{"remainingRequest":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\src\\components\\VirtualList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\src\\components\\VirtualList.vue","mtime":1680967237794},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680855436445},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\babel-loader\\lib\\index.js","mtime":1680855437023},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680855436445},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\vue-loader\\lib\\index.js","mtime":1680855438151}],"contextDependencies":[],"result":["export default {\n  props: {\n    //所有列表数据\n    listData: {\n      type: Array,\n      default: () => []\n    },\n    //预估高度\n    estimatedItemSize: {\n      type: Number,\n      required: true\n    },\n    //容器高度 100px or 50vh\n    height: {\n      type: String,\n      default: \"100%\"\n    }\n  },\n  computed: {\n    _listData() {\n      return this.listData.map((item, index) => {\n        return {\n          _index: `_${index}`,\n          item\n        };\n      });\n    },\n    visibleCount() {\n      return Math.ceil(this.screenHeight / this.estimatedItemSize);\n    },\n    visibleData() {\n      return this._listData.slice(this.start, this.end);\n    }\n  },\n  created() {\n    this.initPositions();\n  },\n  mounted() {\n    this.screenHeight = this.$el.clientHeight;\n    this.start = 0;\n    this.end = this.start + this.visibleCount;\n  },\n  updated() {\n    this.$nextTick(function () {\n      if (!this.$refs.items || !this.$refs.items.length) {\n        return;\n      }\n      //获取真实元素大小，修改对应的尺寸缓存\n      this.updateItemsSize();\n      //更新列表总高度\n      let height = this.positions[this.positions.length - 1].bottom;\n      this.$refs.phantom.style.height = height + \"px\";\n      //更新真实偏移量\n      this.setStartOffset();\n    });\n  },\n  data() {\n    return {\n      //可视区域高度\n      screenHeight: 0,\n      //起始索引\n      start: 0,\n      //结束索引\n      end: 0\n    };\n  },\n  methods: {\n    initPositions() {\n      this.positions = this.listData.map((d, index) => ({\n        index,\n        height: this.estimatedItemSize,\n        top: index * this.estimatedItemSize,\n        bottom: (index + 1) * this.estimatedItemSize\n      }));\n    },\n    //获取列表起始索引\n    getStartIndex(scrollTop = 0) {\n      //二分法查找\n      return this.binarySearch(this.positions, scrollTop);\n    },\n    //二分法查找\n    binarySearch(list, value) {\n      let start = 0;\n      let end = list.length - 1;\n      let tempIndex = null;\n      while (start <= end) {\n        console.log('start====start', start);\n        console.log('list====list', end);\n        let midIndex = start + Math.floor(end - start);\n        console.log('midIndex====', midIndex);\n        let middleValue = list[midIndex].bottom;\n        if (middleValue === value) {\n          // 因为是以bottom作为参照，返回的是列表开始索引，需要+1\n          return midIndex + 1;\n        } else if (middleValue < value) {\n          start = midIndex + 1;\n        } else {\n          if (tempIndex === null || tempIndex > midIndex) {\n            tempIndex = midIndex;\n          }\n          end = end - 1;\n        }\n      }\n      return tempIndex;\n    },\n    //获取列表项的当前尺寸 \n    updateItemsSize() {\n      let nodes = this.$refs.items;\n      nodes.forEach(node => {\n        let rect = node.getBoundingClientRect();\n        let height = rect.height;\n        let index = +node.id.slice(1);\n        let oldHeight = this.positions[index].height;\n        let dValue = oldHeight - height;\n        //存在差值\n        if (dValue) {\n          this.positions[index].bottom = this.positions[index].bottom - dValue;\n          this.positions[index].height = height;\n          for (let k = index + 1; k < this.positions.length; k++) {\n            this.positions[k].top = this.positions[k - 1].bottom;\n            this.positions[k].bottom = this.positions[k].bottom - dValue;\n          }\n        }\n      });\n    },\n    //获取当前的偏移量\n    setStartOffset() {\n      let startOffset = this.start >= 1 ? this.positions[this.start - 1].bottom : 0;\n      this.$refs.content.style.transform = `translate3d(0,${startOffset}px,0)`;\n    },\n    //滚动事件\n    scrollEvent() {\n      //当前滚动位置\n      let scrollTop = this.$refs.list.scrollTop;\n      //此时的开始索引\n      this.start = this.getStartIndex(scrollTop);\n      //此时的结束索引\n      this.end = this.start + this.visibleCount;\n      //此时的偏移量\n      this.setStartOffset();\n    }\n  }\n};",{"version":3,"names":["props","listData","type","Array","default","estimatedItemSize","Number","required","height","String","computed","_listData","map","item","index","_index","visibleCount","Math","ceil","screenHeight","visibleData","slice","start","end","created","initPositions","mounted","$el","clientHeight","updated","$nextTick","$refs","items","length","updateItemsSize","positions","bottom","phantom","style","setStartOffset","data","methods","d","top","getStartIndex","scrollTop","binarySearch","list","value","tempIndex","console","log","midIndex","floor","middleValue","nodes","forEach","node","rect","getBoundingClientRect","id","oldHeight","dValue","k","startOffset","content","transform","scrollEvent"],"sources":["src/components/VirtualList.vue"],"sourcesContent":["<template>\r\n  <div ref=\"list\" :style=\"{height}\" class=\"infinite-list-container\" @scroll=\"scrollEvent($event)\">\r\n    <div ref=\"phantom\" class=\"infinite-list-phantom\"></div>\r\n    <div ref=\"content\" class=\"infinite-list\">\r\n      <div\r\n        class=\"infinite-list-item\"\r\n        ref=\"items\"\r\n        :id=\"item._index\"\r\n        :key=\"item._index\"\r\n        v-for=\"item in visibleData\"\r\n      >\r\n        <slot ref=\"slot\" :item=\"item.item\"></slot>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    //所有列表数据\r\n    listData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    //预估高度\r\n    estimatedItemSize: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    //容器高度 100px or 50vh\r\n    height: {\r\n      type: String,\r\n      default: \"100%\"\r\n    }\r\n  },\r\n  computed: {\r\n    _listData() {\r\n      return this.listData.map((item, index) => {\r\n        return {\r\n          _index: `_${index}`,\r\n          item\r\n        };\r\n      });\r\n    },\r\n    visibleCount() {\r\n      return Math.ceil(this.screenHeight / this.estimatedItemSize);\r\n    },\r\n    visibleData() {\r\n      return this._listData.slice(this.start, this.end);\r\n    }\r\n  },\r\n  created() {\r\n    this.initPositions();\r\n  },\r\n  mounted() {\r\n    this.screenHeight = this.$el.clientHeight;\r\n    this.start = 0;\r\n    this.end = this.start + this.visibleCount;\r\n  },\r\n  updated() {\r\n    this.$nextTick(function() {\r\n      if (!this.$refs.items || !this.$refs.items.length) {\r\n        return;\r\n      }\r\n      //获取真实元素大小，修改对应的尺寸缓存\r\n      this.updateItemsSize();\r\n      //更新列表总高度\r\n      let height = this.positions[this.positions.length - 1].bottom;\r\n      this.$refs.phantom.style.height = height + \"px\";\r\n      //更新真实偏移量\r\n      this.setStartOffset();\r\n    });\r\n  },\r\n  data() {\r\n    return {\r\n      //可视区域高度\r\n      screenHeight: 0,\r\n      //起始索引\r\n      start: 0,\r\n      //结束索引\r\n      end: 0\r\n    };\r\n  },\r\n  methods: {\r\n    initPositions() {\r\n      this.positions = this.listData.map((d, index) => ({\r\n        index,\r\n        height: this.estimatedItemSize,\r\n        top: index * this.estimatedItemSize,\r\n        bottom: (index + 1) * this.estimatedItemSize\r\n      }));\r\n    },\r\n    //获取列表起始索引\r\n    getStartIndex(scrollTop = 0) {\r\n      //二分法查找\r\n      return this.binarySearch(this.positions, scrollTop);\r\n    },\r\n\r\n    //二分法查找\r\n    binarySearch(list, value) {\r\n      let start = 0;\r\n      let end = list.length - 1;\r\n      let tempIndex = null;\r\n      while (start <= end) {\r\n        console.log('start====start',start);\r\n        console.log('list====list',end);\r\n        let midIndex = start + Math.floor(end - start);\r\n        console.log('midIndex====',midIndex);\r\n        let middleValue = list[midIndex].bottom;\r\n        if (middleValue === value) {\r\n          // 因为是以bottom作为参照，返回的是列表开始索引，需要+1\r\n          return midIndex + 1;\r\n        } else if (middleValue < value) {\r\n          start = midIndex + 1\r\n        } else {\r\n          if (tempIndex === null || tempIndex > midIndex) {\r\n            tempIndex = midIndex;\r\n          }\r\n          end = end - 1;\r\n        }\r\n      }\r\n      return tempIndex;\r\n    },\r\n\r\n    //获取列表项的当前尺寸 \r\n    updateItemsSize() {\r\n      let nodes = this.$refs.items;\r\n      nodes.forEach(node => {\r\n        let rect = node.getBoundingClientRect();\r\n        let height = rect.height;\r\n        let index = +node.id.slice(1);\r\n        let oldHeight = this.positions[index].height;\r\n        let dValue = oldHeight - height;\r\n        //存在差值\r\n        if (dValue) {\r\n          this.positions[index].bottom = this.positions[index].bottom - dValue;\r\n          this.positions[index].height = height;\r\n\r\n          for (let k = index + 1; k < this.positions.length; k++) {\r\n            this.positions[k].top = this.positions[k - 1].bottom;\r\n            this.positions[k].bottom = this.positions[k].bottom - dValue;\r\n          }\r\n        }\r\n      })\r\n    },\r\n    //获取当前的偏移量\r\n    setStartOffset() {\r\n      let startOffset =\r\n        this.start >= 1 ? this.positions[this.start - 1].bottom : 0;\r\n        this.$refs.content.style.transform = `translate3d(0,${startOffset}px,0)`;\r\n    },\r\n    //滚动事件\r\n    scrollEvent() {\r\n      //当前滚动位置\r\n      let scrollTop = this.$refs.list.scrollTop;\r\n      //此时的开始索引\r\n      this.start = this.getStartIndex(scrollTop);\r\n      //此时的结束索引\r\n      this.end = this.start + this.visibleCount;\r\n      //此时的偏移量\r\n      this.setStartOffset();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.infinite-list-container {\r\n  overflow: auto;\r\n  position: relative;\r\n  -webkit-overflow-scrolling: touch;\r\n}\r\n\r\n.infinite-list-phantom {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: -1;\r\n}\r\n\r\n.infinite-list {\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  position: absolute;\r\n}\r\n\r\n.infinite-list-item {\r\n  padding: 5px;\r\n  color: #555;\r\n  box-sizing: border-box;\r\n  border-bottom: 1px solid #999;\r\n  /* height:200px; */\r\n}\r\n</style>"],"mappings":"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"}]}