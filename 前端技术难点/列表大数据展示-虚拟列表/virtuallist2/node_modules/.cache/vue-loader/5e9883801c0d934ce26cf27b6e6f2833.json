{"remainingRequest":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\src\\components\\VirtualList.vue?vue&type=style&index=0&id=3179b7c9&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\src\\components\\VirtualList.vue","mtime":1680967237794},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\css-loader\\index.js","mtime":1680855435161},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1680855439394},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\postcss-loader\\src\\index.js","mtime":1680855437014},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680855436445},{"path":"C:\\Users\\王翔\\Desktop\\前端知识总结\\前端技术难点\\列表大数据展示\\virtuallist2\\node_modules\\vue-loader\\lib\\index.js","mtime":1680855438151}],"contextDependencies":[],"result":["\r\n.infinite-list-container {\r\n  overflow: auto;\r\n  position: relative;\r\n  -webkit-overflow-scrolling: touch;\r\n}\r\n\r\n.infinite-list-phantom {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: -1;\r\n}\r\n\r\n.infinite-list {\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  position: absolute;\r\n}\r\n\r\n.infinite-list-item {\r\n  padding: 5px;\r\n  color: #555;\r\n  box-sizing: border-box;\r\n  border-bottom: 1px solid #999;\r\n  /* height:200px; */\r\n}\r\n",{"version":3,"sources":["VirtualList.vue"],"names":[],"mappings":";AA0KA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VirtualList.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div ref=\"list\" :style=\"{height}\" class=\"infinite-list-container\" @scroll=\"scrollEvent($event)\">\r\n    <div ref=\"phantom\" class=\"infinite-list-phantom\"></div>\r\n    <div ref=\"content\" class=\"infinite-list\">\r\n      <div\r\n        class=\"infinite-list-item\"\r\n        ref=\"items\"\r\n        :id=\"item._index\"\r\n        :key=\"item._index\"\r\n        v-for=\"item in visibleData\"\r\n      >\r\n        <slot ref=\"slot\" :item=\"item.item\"></slot>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    //所有列表数据\r\n    listData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    //预估高度\r\n    estimatedItemSize: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    //容器高度 100px or 50vh\r\n    height: {\r\n      type: String,\r\n      default: \"100%\"\r\n    }\r\n  },\r\n  computed: {\r\n    _listData() {\r\n      return this.listData.map((item, index) => {\r\n        return {\r\n          _index: `_${index}`,\r\n          item\r\n        };\r\n      });\r\n    },\r\n    visibleCount() {\r\n      return Math.ceil(this.screenHeight / this.estimatedItemSize);\r\n    },\r\n    visibleData() {\r\n      return this._listData.slice(this.start, this.end);\r\n    }\r\n  },\r\n  created() {\r\n    this.initPositions();\r\n  },\r\n  mounted() {\r\n    this.screenHeight = this.$el.clientHeight;\r\n    this.start = 0;\r\n    this.end = this.start + this.visibleCount;\r\n  },\r\n  updated() {\r\n    this.$nextTick(function() {\r\n      if (!this.$refs.items || !this.$refs.items.length) {\r\n        return;\r\n      }\r\n      //获取真实元素大小，修改对应的尺寸缓存\r\n      this.updateItemsSize();\r\n      //更新列表总高度\r\n      let height = this.positions[this.positions.length - 1].bottom;\r\n      this.$refs.phantom.style.height = height + \"px\";\r\n      //更新真实偏移量\r\n      this.setStartOffset();\r\n    });\r\n  },\r\n  data() {\r\n    return {\r\n      //可视区域高度\r\n      screenHeight: 0,\r\n      //起始索引\r\n      start: 0,\r\n      //结束索引\r\n      end: 0\r\n    };\r\n  },\r\n  methods: {\r\n    initPositions() {\r\n      this.positions = this.listData.map((d, index) => ({\r\n        index,\r\n        height: this.estimatedItemSize,\r\n        top: index * this.estimatedItemSize,\r\n        bottom: (index + 1) * this.estimatedItemSize\r\n      }));\r\n    },\r\n    //获取列表起始索引\r\n    getStartIndex(scrollTop = 0) {\r\n      //二分法查找\r\n      return this.binarySearch(this.positions, scrollTop);\r\n    },\r\n\r\n    //二分法查找\r\n    binarySearch(list, value) {\r\n      let start = 0;\r\n      let end = list.length - 1;\r\n      let tempIndex = null;\r\n      while (start <= end) {\r\n        console.log('start====start',start);\r\n        console.log('list====list',end);\r\n        let midIndex = start + Math.floor(end - start);\r\n        console.log('midIndex====',midIndex);\r\n        let middleValue = list[midIndex].bottom;\r\n        if (middleValue === value) {\r\n          // 因为是以bottom作为参照，返回的是列表开始索引，需要+1\r\n          return midIndex + 1;\r\n        } else if (middleValue < value) {\r\n          start = midIndex + 1\r\n        } else {\r\n          if (tempIndex === null || tempIndex > midIndex) {\r\n            tempIndex = midIndex;\r\n          }\r\n          end = end - 1;\r\n        }\r\n      }\r\n      return tempIndex;\r\n    },\r\n\r\n    //获取列表项的当前尺寸 \r\n    updateItemsSize() {\r\n      let nodes = this.$refs.items;\r\n      nodes.forEach(node => {\r\n        let rect = node.getBoundingClientRect();\r\n        let height = rect.height;\r\n        let index = +node.id.slice(1);\r\n        let oldHeight = this.positions[index].height;\r\n        let dValue = oldHeight - height;\r\n        //存在差值\r\n        if (dValue) {\r\n          this.positions[index].bottom = this.positions[index].bottom - dValue;\r\n          this.positions[index].height = height;\r\n\r\n          for (let k = index + 1; k < this.positions.length; k++) {\r\n            this.positions[k].top = this.positions[k - 1].bottom;\r\n            this.positions[k].bottom = this.positions[k].bottom - dValue;\r\n          }\r\n        }\r\n      })\r\n    },\r\n    //获取当前的偏移量\r\n    setStartOffset() {\r\n      let startOffset =\r\n        this.start >= 1 ? this.positions[this.start - 1].bottom : 0;\r\n        this.$refs.content.style.transform = `translate3d(0,${startOffset}px,0)`;\r\n    },\r\n    //滚动事件\r\n    scrollEvent() {\r\n      //当前滚动位置\r\n      let scrollTop = this.$refs.list.scrollTop;\r\n      //此时的开始索引\r\n      this.start = this.getStartIndex(scrollTop);\r\n      //此时的结束索引\r\n      this.end = this.start + this.visibleCount;\r\n      //此时的偏移量\r\n      this.setStartOffset();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.infinite-list-container {\r\n  overflow: auto;\r\n  position: relative;\r\n  -webkit-overflow-scrolling: touch;\r\n}\r\n\r\n.infinite-list-phantom {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: -1;\r\n}\r\n\r\n.infinite-list {\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  position: absolute;\r\n}\r\n\r\n.infinite-list-item {\r\n  padding: 5px;\r\n  color: #555;\r\n  box-sizing: border-box;\r\n  border-bottom: 1px solid #999;\r\n  /* height:200px; */\r\n}\r\n</style>"]}]}